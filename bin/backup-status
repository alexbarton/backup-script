#!/bin/bash
#
# backup-script system for cloning systems using rsync
# Copyright (c)2008-2015 Alexander Barton, alex@barton.de
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Please read the file COPYING, README and AUTHORS for more information.
#

NAME=`basename $0`
PIDFILE="/var/run/backup-script.pid"
QUICK=0

export LC_ALL=C

declare -i count=0
declare -i snapshots=0

# Default settings, can be overwritten in backup-script.conf:
[ -d "/usr/local/etc/backup-script.d" ] \
	&& conf_d="/usr/local/etc/backup-script.d" \
	|| conf_d="/etc/backup-script.d"
default_target=""
default_generations=0

# Search configuration file (last one is used as default!)
for conf in \
	"/usr/local/etc/backup-script.conf" \
	"/etc/backup-script.conf" \
	"${conf_d}/backup-script.conf" \
	"/usr/local/etc/backup-script.conf" \
; do
	if [ -r "$conf" ]; then
		source "$conf"
		break
	fi
done

Check_Size() {
	# $1: directory
	# $2: padding

	if [ "$QUICK" = "0" ]; then
		size=`du -Hhs "$1" | cut -f1`
		echo "$2  - Size:" $size
	fi
}

Check_Stamp() {
	# $1: stamp file
	# $2: padding

	if [ -f "$1" ]; then
		if [ "$(uname)" = "Linux" ]; then
			last=`LC_ALL=C stat "$1" | grep "^Modify: " \
			 | cut -d':' -f2- | cut -d. -f1`
		else
			last=`LC_ALL=C stat -f "%Sc" "$1"`
		fi
		[ -n "$last" ] && echo "$2  - Date:" $last
		code=
		source "$1"
		case "$code" in
		  0)	txt=", OK"; ;;
		  24)	txt=", WARNING (some files vanished during backup)"; ;;
		  *)	txt=", ERROR"
		esac
		[ -n "$code" ] && echo "$2  - Result code: $code$txt"
	else
		echo "$2  - No timestamp recorded! Backup currently running or aborted?"
	fi
}

if [ "$1" == "-r" -o "$1" == "--running" ]; then
	pid="$(cat "$PIDFILE" 2>/dev/null)"
	if [ -n "$pid" ]; then
		if kill -0 "$pid" >/dev/null 2>&1; then
			echo "Backup job running with PID $pid."
			echo
			pstree -ap "$pid" 2>/dev/null
			exit 0
		else
			echo "No backup running (invalid PID $pid in \"$PIDFILE\")."
			exit 1
		fi
	fi
	echo "No backup running (no PID file \"$PIDFILE\" found)."
	exit 1
fi

if [ "$1" == "-q" ]; then
	QUICK=1
	shift
fi

case "$1" in
    "-"*)
	echo "Usage: $NAME [-q] [<system> [<system> [...]]]"
	echo "       $NAME {-r|--running}"
	exit 2
	;;
esac

if [ $# -ge 1 ]; then
	for s in "$@"; do
		if [ ! -r "${conf_d}/$s" ]; then
			echo "$NAME: Can' read \"${conf_d}/$s\"!"
			exit 1
		fi
		sys="$sys ${conf_d}/$s"
	done
else
	sys="${conf_d}/"*
fi

[ -r "${conf_d}/backup-script.conf" ] && source "${conf_d}/backup-script.conf"

for f in $sys; do
	[ -r "$f" -a -f "$f" ] || continue

	fname=`basename $f`
	case "$fname" in
		"backup-script.conf"|*.sh)
			continue
			;;
	esac

	# Set global defaults
	system="$fname"
	target="$default_target"
	generations="$default_generations"

	# Read in system configuration file
	source "$f"

	target="$target/$system"

	[ -d "$target" ] || continue

	# System name
	[ "$system" = "$fname" ] && echo "$fname" || echo "$fname [$system]"

	# System target directory
	echo "- Target: $target"

	if [ $generations -gt 0 ]; then
		for s in $target/current $target/[0-9]*-[0-9]*; do
			[ -e "$s" ] || continue
			echo "  - Snapshot: $s"
			Check_Size "$s" "  "
			Check_Stamp "$s/.stamp" "  "
			snapshots=$snapshots+1
		done
	else
		# Timestamp and result code
		Check_Size "$target"
		Check_Stamp "$target/.stamp"
		snapshots=$snapshots+1
	fi

	count=$count+1
	echo
done

if [ $count -lt 1 ]; then
	echo "No backups found!"
	exit 1
fi
[ $count -eq 1 ] && sc="" || sc="s"
[ $snapshots -eq 1 ] && ss="" || ss="s"
echo "$count system backup$sc found, $snapshots snapshot$ss."

# -eof-
